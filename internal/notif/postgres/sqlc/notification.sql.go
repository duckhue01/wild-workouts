// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: notification.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const getNotification = `-- name: GetNotification :one
SELECT id, receiver_id, data, is_seen, event, sender_id, created_at, updated_at, deleted_at FROM  notif.notification WHERE id = $1
`

func (q *Queries) GetNotification(ctx context.Context, id uuid.UUID) (NotifNotification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i NotifNotification
	err := row.Scan(
		&i.ID,
		&i.ReceiverID,
		&i.Data,
		&i.IsSeen,
		&i.Event,
		&i.SenderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertNotification = `-- name: InsertNotification :exec
INSERT INTO notif.notification(id, receiver_id, data, is_seen, event, sender_id)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertNotificationParams struct {
	ID         uuid.UUID             `json:"id"`
	ReceiverID uuid.NullUUID         `json:"receiver_id"`
	Data       pqtype.NullRawMessage `json:"data"`
	IsSeen     sql.NullBool          `json:"is_seen"`
	Event      sql.NullString        `json:"event"`
	SenderID   uuid.NullUUID         `json:"sender_id"`
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) error {
	_, err := q.db.ExecContext(ctx, insertNotification,
		arg.ID,
		arg.ReceiverID,
		arg.Data,
		arg.IsSeen,
		arg.Event,
		arg.SenderID,
	)
	return err
}

const listUserNotifications = `-- name: ListUserNotifications :many
SELECT id, receiver_id, data, is_seen, event, sender_id, created_at, updated_at, deleted_at FROM  notif.notification WHERE receiver_id = $1 AND id > $2 LIMIT $3
`

type ListUserNotificationsParams struct {
	ReceiverID uuid.NullUUID `json:"receiver_id"`
	ID         uuid.UUID     `json:"id"`
	Limit      int32         `json:"limit"`
}

func (q *Queries) ListUserNotifications(ctx context.Context, arg ListUserNotificationsParams) ([]NotifNotification, error) {
	rows, err := q.db.QueryContext(ctx, listUserNotifications, arg.ReceiverID, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []NotifNotification{}
	for rows.Next() {
		var i NotifNotification
		if err := rows.Scan(
			&i.ID,
			&i.ReceiverID,
			&i.Data,
			&i.IsSeen,
			&i.Event,
			&i.SenderID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :one
UPDATE notif.notification SET receiver_id = $1, data = $2, is_seen = $3, event = $4, sender_id = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, receiver_id, data, is_seen, event, sender_id, created_at, updated_at, deleted_at
`

type UpdateNotificationParams struct {
	ReceiverID uuid.NullUUID         `json:"receiver_id"`
	Data       pqtype.NullRawMessage `json:"data"`
	IsSeen     sql.NullBool          `json:"is_seen"`
	Event      sql.NullString        `json:"event"`
	SenderID   uuid.NullUUID         `json:"sender_id"`
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) (NotifNotification, error) {
	row := q.db.QueryRowContext(ctx, updateNotification,
		arg.ReceiverID,
		arg.Data,
		arg.IsSeen,
		arg.Event,
		arg.SenderID,
	)
	var i NotifNotification
	err := row.Scan(
		&i.ID,
		&i.ReceiverID,
		&i.Data,
		&i.IsSeen,
		&i.Event,
		&i.SenderID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
